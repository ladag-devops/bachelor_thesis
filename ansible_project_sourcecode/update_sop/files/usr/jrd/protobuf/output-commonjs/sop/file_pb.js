/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SopFile.Acceleration', null, global);
goog.exportSymbol('proto.SopFile.ChannelStats', null, global);
goog.exportSymbol('proto.SopFile.Data', null, global);
goog.exportSymbol('proto.SopFile.File', null, global);
goog.exportSymbol('proto.SopFile.LocalConfig', null, global);
goog.exportSymbol('proto.SopFile.LocalDevice', null, global);
goog.exportSymbol('proto.SopFile.LocalStatus', null, global);
goog.exportSymbol('proto.SopFile.RemoteConfig', null, global);
goog.exportSymbol('proto.SopFile.RemoteDevice', null, global);
goog.exportSymbol('proto.SopFile.RemoteStatus', null, global);
goog.exportSymbol('proto.SopFile.Stats', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SopFile.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.File.displayName = 'proto.SopFile.File';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.File.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.File} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.File.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp(),
    remoteDevice: (f = msg.getRemoteDevice()) && proto.SopFile.RemoteDevice.toObject(includeInstance, f),
    remoteStatus: (f = msg.getRemoteStatus()) && proto.SopFile.RemoteStatus.toObject(includeInstance, f),
    remoteConfig: (f = msg.getRemoteConfig()) && proto.SopFile.RemoteConfig.toObject(includeInstance, f),
    localDevice: (f = msg.getLocalDevice()) && proto.SopFile.LocalDevice.toObject(includeInstance, f),
    localStatus: (f = msg.getLocalStatus()) && proto.SopFile.LocalStatus.toObject(includeInstance, f),
    localConfig: (f = msg.getLocalConfig()) && proto.SopFile.LocalConfig.toObject(includeInstance, f),
    acceleration: (f = msg.getAcceleration()) && proto.SopFile.Acceleration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.File}
 */
proto.SopFile.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.File;
  return proto.SopFile.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.File}
 */
proto.SopFile.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.SopFile.RemoteDevice;
      reader.readMessage(value,proto.SopFile.RemoteDevice.deserializeBinaryFromReader);
      msg.setRemoteDevice(value);
      break;
    case 3:
      var value = new proto.SopFile.RemoteStatus;
      reader.readMessage(value,proto.SopFile.RemoteStatus.deserializeBinaryFromReader);
      msg.setRemoteStatus(value);
      break;
    case 4:
      var value = new proto.SopFile.RemoteConfig;
      reader.readMessage(value,proto.SopFile.RemoteConfig.deserializeBinaryFromReader);
      msg.setRemoteConfig(value);
      break;
    case 5:
      var value = new proto.SopFile.LocalDevice;
      reader.readMessage(value,proto.SopFile.LocalDevice.deserializeBinaryFromReader);
      msg.setLocalDevice(value);
      break;
    case 6:
      var value = new proto.SopFile.LocalStatus;
      reader.readMessage(value,proto.SopFile.LocalStatus.deserializeBinaryFromReader);
      msg.setLocalStatus(value);
      break;
    case 7:
      var value = new proto.SopFile.LocalConfig;
      reader.readMessage(value,proto.SopFile.LocalConfig.deserializeBinaryFromReader);
      msg.setLocalConfig(value);
      break;
    case 8:
      var value = new proto.SopFile.Acceleration;
      reader.readMessage(value,proto.SopFile.Acceleration.deserializeBinaryFromReader);
      msg.setAcceleration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.File} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.File.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.File.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getRemoteDevice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SopFile.RemoteDevice.serializeBinaryToWriter
    );
  }
  f = this.getRemoteStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SopFile.RemoteStatus.serializeBinaryToWriter
    );
  }
  f = this.getRemoteConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SopFile.RemoteConfig.serializeBinaryToWriter
    );
  }
  f = this.getLocalDevice();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SopFile.LocalDevice.serializeBinaryToWriter
    );
  }
  f = this.getLocalStatus();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.SopFile.LocalStatus.serializeBinaryToWriter
    );
  }
  f = this.getLocalConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.SopFile.LocalConfig.serializeBinaryToWriter
    );
  }
  f = this.getAcceleration();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SopFile.Acceleration.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.File} The clone.
 */
proto.SopFile.File.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.File} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.SopFile.File.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.SopFile.File.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional RemoteDevice remote_device = 2;
 * @return {proto.SopFile.RemoteDevice}
 */
proto.SopFile.File.prototype.getRemoteDevice = function() {
  return /** @type{proto.SopFile.RemoteDevice} */ (
    jspb.Message.getWrapperField(this, proto.SopFile.RemoteDevice, 2));
};


/** @param {proto.SopFile.RemoteDevice|undefined} value  */
proto.SopFile.File.prototype.setRemoteDevice = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SopFile.File.prototype.clearRemoteDevice = function() {
  this.setRemoteDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SopFile.File.prototype.hasRemoteDevice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RemoteStatus remote_status = 3;
 * @return {proto.SopFile.RemoteStatus}
 */
proto.SopFile.File.prototype.getRemoteStatus = function() {
  return /** @type{proto.SopFile.RemoteStatus} */ (
    jspb.Message.getWrapperField(this, proto.SopFile.RemoteStatus, 3));
};


/** @param {proto.SopFile.RemoteStatus|undefined} value  */
proto.SopFile.File.prototype.setRemoteStatus = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SopFile.File.prototype.clearRemoteStatus = function() {
  this.setRemoteStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SopFile.File.prototype.hasRemoteStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RemoteConfig remote_config = 4;
 * @return {proto.SopFile.RemoteConfig}
 */
proto.SopFile.File.prototype.getRemoteConfig = function() {
  return /** @type{proto.SopFile.RemoteConfig} */ (
    jspb.Message.getWrapperField(this, proto.SopFile.RemoteConfig, 4));
};


/** @param {proto.SopFile.RemoteConfig|undefined} value  */
proto.SopFile.File.prototype.setRemoteConfig = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.SopFile.File.prototype.clearRemoteConfig = function() {
  this.setRemoteConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SopFile.File.prototype.hasRemoteConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LocalDevice local_device = 5;
 * @return {proto.SopFile.LocalDevice}
 */
proto.SopFile.File.prototype.getLocalDevice = function() {
  return /** @type{proto.SopFile.LocalDevice} */ (
    jspb.Message.getWrapperField(this, proto.SopFile.LocalDevice, 5));
};


/** @param {proto.SopFile.LocalDevice|undefined} value  */
proto.SopFile.File.prototype.setLocalDevice = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.SopFile.File.prototype.clearLocalDevice = function() {
  this.setLocalDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SopFile.File.prototype.hasLocalDevice = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LocalStatus local_status = 6;
 * @return {proto.SopFile.LocalStatus}
 */
proto.SopFile.File.prototype.getLocalStatus = function() {
  return /** @type{proto.SopFile.LocalStatus} */ (
    jspb.Message.getWrapperField(this, proto.SopFile.LocalStatus, 6));
};


/** @param {proto.SopFile.LocalStatus|undefined} value  */
proto.SopFile.File.prototype.setLocalStatus = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.SopFile.File.prototype.clearLocalStatus = function() {
  this.setLocalStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SopFile.File.prototype.hasLocalStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional LocalConfig local_config = 7;
 * @return {proto.SopFile.LocalConfig}
 */
proto.SopFile.File.prototype.getLocalConfig = function() {
  return /** @type{proto.SopFile.LocalConfig} */ (
    jspb.Message.getWrapperField(this, proto.SopFile.LocalConfig, 7));
};


/** @param {proto.SopFile.LocalConfig|undefined} value  */
proto.SopFile.File.prototype.setLocalConfig = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.SopFile.File.prototype.clearLocalConfig = function() {
  this.setLocalConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SopFile.File.prototype.hasLocalConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Acceleration acceleration = 8;
 * @return {proto.SopFile.Acceleration}
 */
proto.SopFile.File.prototype.getAcceleration = function() {
  return /** @type{proto.SopFile.Acceleration} */ (
    jspb.Message.getWrapperField(this, proto.SopFile.Acceleration, 8));
};


/** @param {proto.SopFile.Acceleration|undefined} value  */
proto.SopFile.File.prototype.setAcceleration = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.SopFile.File.prototype.clearAcceleration = function() {
  this.setAcceleration(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SopFile.File.prototype.hasAcceleration = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.RemoteDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SopFile.RemoteDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.RemoteDevice.displayName = 'proto.SopFile.RemoteDevice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.RemoteDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.RemoteDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.RemoteDevice} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.RemoteDevice.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress(),
    uuid: msg.getUuid(),
    type: msg.getType(),
    name: msg.getName(),
    firmwareVersion: msg.getFirmwareVersion()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.RemoteDevice}
 */
proto.SopFile.RemoteDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.RemoteDevice;
  return proto.SopFile.RemoteDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.RemoteDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.RemoteDevice}
 */
proto.SopFile.RemoteDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFirmwareVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.RemoteDevice} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.RemoteDevice.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.RemoteDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.RemoteDevice.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getFirmwareVersion();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.RemoteDevice} The clone.
 */
proto.SopFile.RemoteDevice.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.RemoteDevice} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.SopFile.RemoteDevice.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.SopFile.RemoteDevice.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.SopFile.RemoteDevice.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.SopFile.RemoteDevice.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.SopFile.RemoteDevice.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.SopFile.RemoteDevice.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.SopFile.RemoteDevice.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.SopFile.RemoteDevice.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 firmware_version = 5;
 * @return {number}
 */
proto.SopFile.RemoteDevice.prototype.getFirmwareVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteDevice.prototype.setFirmwareVersion = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.RemoteStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SopFile.RemoteStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.RemoteStatus.displayName = 'proto.SopFile.RemoteStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.RemoteStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.RemoteStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.RemoteStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.RemoteStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetCounter: msg.getPacketCounter(),
    configNumber: msg.getConfigNumber(),
    rssi: msg.getRssi(),
    capacitance: msg.getCapacitance(),
    temperature: msg.getTemperature(),
    temperatureInternal: msg.getTemperatureInternal(),
    batteryVoltage: msg.getBatteryVoltage(),
    restartsUnknown: msg.getRestartsUnknown(),
    restartsSoftware: msg.getRestartsSoftware(),
    restartsWatchdog: msg.getRestartsWatchdog()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.RemoteStatus}
 */
proto.SopFile.RemoteStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.RemoteStatus;
  return proto.SopFile.RemoteStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.RemoteStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.RemoteStatus}
 */
proto.SopFile.RemoteStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPacketCounter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConfigNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCapacitance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperatureInternal(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBatteryVoltage(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRestartsUnknown(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRestartsSoftware(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRestartsWatchdog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.RemoteStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.RemoteStatus.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.RemoteStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.RemoteStatus.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPacketCounter();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getConfigNumber();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getCapacitance();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = this.getTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = this.getTemperatureInternal();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = this.getBatteryVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = this.getRestartsUnknown();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getRestartsSoftware();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getRestartsWatchdog();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.RemoteStatus} The clone.
 */
proto.SopFile.RemoteStatus.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.RemoteStatus} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 packet_counter = 1;
 * @return {number}
 */
proto.SopFile.RemoteStatus.prototype.getPacketCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteStatus.prototype.setPacketCounter = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 config_number = 2;
 * @return {number}
 */
proto.SopFile.RemoteStatus.prototype.getConfigNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteStatus.prototype.setConfigNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 rssi = 3;
 * @return {number}
 */
proto.SopFile.RemoteStatus.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteStatus.prototype.setRssi = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float capacitance = 4;
 * @return {number}
 */
proto.SopFile.RemoteStatus.prototype.getCapacitance = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteStatus.prototype.setCapacitance = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float temperature = 5;
 * @return {number}
 */
proto.SopFile.RemoteStatus.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteStatus.prototype.setTemperature = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float temperature_internal = 6;
 * @return {number}
 */
proto.SopFile.RemoteStatus.prototype.getTemperatureInternal = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteStatus.prototype.setTemperatureInternal = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional float battery_voltage = 7;
 * @return {number}
 */
proto.SopFile.RemoteStatus.prototype.getBatteryVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteStatus.prototype.setBatteryVoltage = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 restarts_unknown = 8;
 * @return {number}
 */
proto.SopFile.RemoteStatus.prototype.getRestartsUnknown = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteStatus.prototype.setRestartsUnknown = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 restarts_software = 9;
 * @return {number}
 */
proto.SopFile.RemoteStatus.prototype.getRestartsSoftware = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteStatus.prototype.setRestartsSoftware = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 restarts_watchdog = 10;
 * @return {number}
 */
proto.SopFile.RemoteStatus.prototype.getRestartsWatchdog = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteStatus.prototype.setRestartsWatchdog = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.RemoteConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SopFile.RemoteConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.RemoteConfig.displayName = 'proto.SopFile.RemoteConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.RemoteConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.RemoteConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.RemoteConfig} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.RemoteConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    wakeupWindow: msg.getWakeupWindow(),
    sleepTime: msg.getSleepTime(),
    samplingInterval: msg.getSamplingInterval(),
    capDacA: msg.getCapDacA(),
    capDacB: msg.getCapDacB(),
    capOffset: msg.getCapOffset(),
    capGain: msg.getCapGain(),
    capCtrl: msg.getCapCtrl()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.RemoteConfig}
 */
proto.SopFile.RemoteConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.RemoteConfig;
  return proto.SopFile.RemoteConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.RemoteConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.RemoteConfig}
 */
proto.SopFile.RemoteConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWakeupWindow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSleepTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSamplingInterval(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCapDacA(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCapDacB(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCapOffset(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCapGain(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCapCtrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.RemoteConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.RemoteConfig.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.RemoteConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.RemoteConfig.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWakeupWindow();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getSleepTime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getSamplingInterval();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getCapDacA();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getCapDacB();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getCapOffset();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getCapGain();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getCapCtrl();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.RemoteConfig} The clone.
 */
proto.SopFile.RemoteConfig.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.RemoteConfig} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 wakeup_window = 1;
 * @return {number}
 */
proto.SopFile.RemoteConfig.prototype.getWakeupWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteConfig.prototype.setWakeupWindow = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 sleep_time = 2;
 * @return {number}
 */
proto.SopFile.RemoteConfig.prototype.getSleepTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteConfig.prototype.setSleepTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 sampling_interval = 3;
 * @return {number}
 */
proto.SopFile.RemoteConfig.prototype.getSamplingInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteConfig.prototype.setSamplingInterval = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 cap_dac_a = 4;
 * @return {number}
 */
proto.SopFile.RemoteConfig.prototype.getCapDacA = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteConfig.prototype.setCapDacA = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 cap_dac_b = 5;
 * @return {number}
 */
proto.SopFile.RemoteConfig.prototype.getCapDacB = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteConfig.prototype.setCapDacB = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 cap_offset = 6;
 * @return {number}
 */
proto.SopFile.RemoteConfig.prototype.getCapOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteConfig.prototype.setCapOffset = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 cap_gain = 7;
 * @return {number}
 */
proto.SopFile.RemoteConfig.prototype.getCapGain = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteConfig.prototype.setCapGain = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 cap_ctrl = 8;
 * @return {number}
 */
proto.SopFile.RemoteConfig.prototype.getCapCtrl = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.SopFile.RemoteConfig.prototype.setCapCtrl = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.LocalDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SopFile.LocalDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.LocalDevice.displayName = 'proto.SopFile.LocalDevice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.LocalDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.LocalDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.LocalDevice} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.LocalDevice.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: msg.getIdentifier(),
    firmwareVersion: msg.getFirmwareVersion()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.LocalDevice}
 */
proto.SopFile.LocalDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.LocalDevice;
  return proto.SopFile.LocalDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.LocalDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.LocalDevice}
 */
proto.SopFile.LocalDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFirmwareVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.LocalDevice} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.LocalDevice.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.LocalDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.LocalDevice.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getFirmwareVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.LocalDevice} The clone.
 */
proto.SopFile.LocalDevice.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.LocalDevice} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.SopFile.LocalDevice.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.SopFile.LocalDevice.prototype.setIdentifier = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 firmware_version = 2;
 * @return {number}
 */
proto.SopFile.LocalDevice.prototype.getFirmwareVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.SopFile.LocalDevice.prototype.setFirmwareVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.LocalStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SopFile.LocalStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.LocalStatus.displayName = 'proto.SopFile.LocalStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.LocalStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.LocalStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.LocalStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.LocalStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    uptime: msg.getUptime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.LocalStatus}
 */
proto.SopFile.LocalStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.LocalStatus;
  return proto.SopFile.LocalStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.LocalStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.LocalStatus}
 */
proto.SopFile.LocalStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.LocalStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.LocalStatus.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.LocalStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.LocalStatus.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUptime();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.LocalStatus} The clone.
 */
proto.SopFile.LocalStatus.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.LocalStatus} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 uptime = 1;
 * @return {number}
 */
proto.SopFile.LocalStatus.prototype.getUptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.SopFile.LocalStatus.prototype.setUptime = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.LocalConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SopFile.LocalConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.LocalConfig.displayName = 'proto.SopFile.LocalConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.LocalConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.LocalConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.LocalConfig} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.LocalConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.LocalConfig}
 */
proto.SopFile.LocalConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.LocalConfig;
  return proto.SopFile.LocalConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.LocalConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.LocalConfig}
 */
proto.SopFile.LocalConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.LocalConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.LocalConfig.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.LocalConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.LocalConfig.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.LocalConfig} The clone.
 */
proto.SopFile.LocalConfig.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.LocalConfig} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SopFile.Data.repeatedFields_, null);
};
goog.inherits(proto.SopFile.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.Data.displayName = 'proto.SopFile.Data';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SopFile.Data.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.Data} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.Data}
 */
proto.SopFile.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.Data;
  return proto.SopFile.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.Data}
 */
proto.SopFile.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.Data} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.Data.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.Data.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValuesList();
  if (f.length > 0) {
    writer.writePackedSint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.Data} The clone.
 */
proto.SopFile.Data.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.Data} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated sint32 values = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.SopFile.Data.prototype.getValuesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<number>} value  */
proto.SopFile.Data.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.SopFile.Data.prototype.clearValuesList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SopFile.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.Stats.displayName = 'proto.SopFile.Stats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.Stats} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: msg.getMin(),
    max: msg.getMax(),
    std: msg.getStd(),
    avg: msg.getAvg()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.Stats}
 */
proto.SopFile.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.Stats;
  return proto.SopFile.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.Stats}
 */
proto.SopFile.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMax(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStd(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setAvg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.Stats} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.Stats.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.Stats.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMin();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getMax();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getStd();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getAvg();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.Stats} The clone.
 */
proto.SopFile.Stats.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.Stats} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional sint32 min = 1;
 * @return {number}
 */
proto.SopFile.Stats.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.SopFile.Stats.prototype.setMin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional sint32 max = 2;
 * @return {number}
 */
proto.SopFile.Stats.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.SopFile.Stats.prototype.setMax = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 std = 3;
 * @return {number}
 */
proto.SopFile.Stats.prototype.getStd = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.SopFile.Stats.prototype.setStd = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional sint32 avg = 4;
 * @return {number}
 */
proto.SopFile.Stats.prototype.getAvg = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.SopFile.Stats.prototype.setAvg = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.ChannelStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SopFile.ChannelStats.repeatedFields_, null);
};
goog.inherits(proto.SopFile.ChannelStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.ChannelStats.displayName = 'proto.SopFile.ChannelStats';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SopFile.ChannelStats.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.ChannelStats.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.ChannelStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.ChannelStats} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.ChannelStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.SopFile.Stats.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.ChannelStats}
 */
proto.SopFile.ChannelStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.ChannelStats;
  return proto.SopFile.ChannelStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.ChannelStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.ChannelStats}
 */
proto.SopFile.ChannelStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SopFile.Stats;
      reader.readMessage(value,proto.SopFile.Stats.deserializeBinaryFromReader);
      msg.getValuesList().push(value);
      msg.setValuesList(msg.getValuesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.ChannelStats} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.ChannelStats.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.ChannelStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.ChannelStats.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SopFile.Stats.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.ChannelStats} The clone.
 */
proto.SopFile.ChannelStats.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.ChannelStats} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Stats values = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SopFile.Stats>}
 */
proto.SopFile.ChannelStats.prototype.getValuesList = function() {
  return /** @type{!Array.<!proto.SopFile.Stats>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SopFile.Stats, 1));
};


/** @param {Array.<!proto.SopFile.Stats>} value  */
proto.SopFile.ChannelStats.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.SopFile.ChannelStats.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SopFile.Acceleration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SopFile.Acceleration.repeatedFields_, null);
};
goog.inherits(proto.SopFile.Acceleration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SopFile.Acceleration.displayName = 'proto.SopFile.Acceleration';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SopFile.Acceleration.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SopFile.Acceleration.prototype.toObject = function(opt_includeInstance) {
  return proto.SopFile.Acceleration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SopFile.Acceleration} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SopFile.Acceleration.toObject = function(includeInstance, msg) {
  var f, obj = {
    samplesList: jspb.Message.toObjectList(msg.getSamplesList(),
    proto.SopFile.Data.toObject, includeInstance),
    samplingRate: msg.getSamplingRate(),
    statsList: jspb.Message.toObjectList(msg.getStatsList(),
    proto.SopFile.ChannelStats.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SopFile.Acceleration}
 */
proto.SopFile.Acceleration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SopFile.Acceleration;
  return proto.SopFile.Acceleration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SopFile.Acceleration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SopFile.Acceleration}
 */
proto.SopFile.Acceleration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SopFile.Data;
      reader.readMessage(value,proto.SopFile.Data.deserializeBinaryFromReader);
      msg.getSamplesList().push(value);
      msg.setSamplesList(msg.getSamplesList());
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSamplingRate(value);
      break;
    case 3:
      var value = new proto.SopFile.ChannelStats;
      reader.readMessage(value,proto.SopFile.ChannelStats.deserializeBinaryFromReader);
      msg.getStatsList().push(value);
      msg.setStatsList(msg.getStatsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SopFile.Acceleration} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.Acceleration.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SopFile.Acceleration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SopFile.Acceleration.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSamplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SopFile.Data.serializeBinaryToWriter
    );
  }
  f = this.getSamplingRate();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SopFile.ChannelStats.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SopFile.Acceleration} The clone.
 */
proto.SopFile.Acceleration.prototype.cloneMessage = function() {
  return /** @type {!proto.SopFile.Acceleration} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Data samples = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SopFile.Data>}
 */
proto.SopFile.Acceleration.prototype.getSamplesList = function() {
  return /** @type{!Array.<!proto.SopFile.Data>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SopFile.Data, 1));
};


/** @param {Array.<!proto.SopFile.Data>} value  */
proto.SopFile.Acceleration.prototype.setSamplesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.SopFile.Acceleration.prototype.clearSamplesList = function() {
  this.setSamplesList([]);
};


/**
 * optional uint32 sampling_rate = 2;
 * @return {number}
 */
proto.SopFile.Acceleration.prototype.getSamplingRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.SopFile.Acceleration.prototype.setSamplingRate = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated ChannelStats stats = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SopFile.ChannelStats>}
 */
proto.SopFile.Acceleration.prototype.getStatsList = function() {
  return /** @type{!Array.<!proto.SopFile.ChannelStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SopFile.ChannelStats, 3));
};


/** @param {Array.<!proto.SopFile.ChannelStats>} value  */
proto.SopFile.Acceleration.prototype.setStatsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.SopFile.Acceleration.prototype.clearStatsList = function() {
  this.setStatsList([]);
};


goog.object.extend(exports, proto.SopFile);
